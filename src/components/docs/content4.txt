import React, { useState } from 'react';
import axios from 'axios';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

const CollegeSearch = () => {
  const [filteredData, setFilteredData] = useState([]);

  // Form validation schema using Yup
  const validationSchema = Yup.object({
    jeeRank: Yup.number().required('JEE Rank is required'),
    gender: Yup.string().required('Gender is required'),
    seatType: Yup.string().required('Seat Type is required'),
    pwdStatus: Yup.string().required('PWD Status is required'),
  });

  // Initial form values
  const initialValues = {
    jeeRank: '',
    gender: '',
    seatType: '',
    pwdStatus: 'No', // Default value for PWD status (can be Yes/No)
  };

  // Function to handle form submission
  const onSubmit = async (values) => {
    try {
      // Assuming JSON file data is being fetched from an API endpoint or local file
      const response = await axios.get('/path-to-your-json-data'); // Replace with the correct path
      const jsonData = response.data;

      // Filter the JSON data based on form inputs
      const result = jsonData.filter((item) => {
        return (
          item.gender === values.gender &&
          item.seat_type === values.seatType &&
          (values.pwdStatus === 'No' || item.pwd === values.pwdStatus) &&
          values.jeeRank >= item.opening_rank &&
          values.jeeRank <= item.closing_rank
        );
      });

      // Set the filtered data to display it
      setFilteredData(result);
    } catch (error) {
      console.error('Error fetching or filtering data:', error);
    }
  };

  return (
    <div>
      <h2>College Search Based on JEE Rank</h2>
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={onSubmit}
      >
        <Form>
          <div>
            <label htmlFor="jeeRank">JEE Rank</label>
            <Field type="number" id="jeeRank" name="jeeRank" />
            <ErrorMessage name="jeeRank" component="div" />
          </div>

          <div>
            <label htmlFor="gender">Gender</label>
            <Field as="select" id="gender" name="gender">
              <option value="">Select Gender</option>
              <option value="Gender-Neutral">Gender-Neutral</option>
              <option value="Female-Only">Female-Only</option>
            </Field>
            <ErrorMessage name="gender" component="div" />
          </div>

          <div>
            <label htmlFor="seatType">Seat Type</label>
            <Field as="select" id="seatType" name="seatType">
              <option value="">Select Seat Type</option>
              <option value="GEN">GEN</option>
              <option value="OBC-NCL">OBC-NCL</option>
              <option value="SC">SC</option>
              <option value="ST">ST</option>
              {/* Add other seat types as needed */}
            </Field>
            <ErrorMessage name="seatType" component="div" />
          </div>

          <div>
            <label htmlFor="pwdStatus">PWD Status</label>
            <Field as="select" id="pwdStatus" name="pwdStatus">
              <option value="No">No</option>
              <option value="Yes">Yes</option>
            </Field>
            <ErrorMessage name="pwdStatus" component="div" />
          </div>

          <button type="submit">Search</button>
        </Form>
      </Formik>

      {/* Display the filtered results */}
      {filteredData.length > 0 ? (
        <div>
          <h3>Filtered Colleges:</h3>
          <ul>
            {filteredData.map((college) => (
              <li key={college.id}>
                {college.institute_name} - {college.program_name} (Rank Range: {college.opening_rank} - {college.closing_rank})
              </li>
            ))}
          </ul>
        </div>
      ) : (
        <p>No colleges found matching your criteria.</p>
      )}
    </div>
  );
};

export default CollegeSearch;
